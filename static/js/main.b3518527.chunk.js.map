{"version":3,"sources":["api.ts","types/Option.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Option","TodoItem","React","memo","todo","onTodoSelect","todoStatus","id","title","completed","className","cn","type","onClick","TodoList","todos","selectedTodo","map","isSelectedTodo","TodoFilter","onInputChange","inputValue","option","onFilterChange","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","onClose","useState","user","setUser","isUserLoading","setIsUserLoading","useEffect","userId","data","catch","error","finally","href","email","name","App","setSelectedTodo","setTodos","isLoading","setIsLoading","setInputValue","All","setOption","handleModalClose","useCallback","visibleTodos","useMemo","filter","input","toLowerCase","includes","trim","Active","Complited","handleOption","selectedFilter","handleInputChange","query","handleTodoSelect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3518527.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Option {\n  All = 'all',\n  Active = 'active',\n  Complited = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  onTodoSelect: (todo: Todo) => void;\n  todoStatus: boolean;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(\n  ({\n    todo,\n    onTodoSelect,\n    todoStatus,\n  }) => {\n    const { id, title, completed } = todo;\n\n    return (\n      <tr\n        data-cy=\"todo\"\n        className={cn({ 'has-background-info-light': todoStatus })}\n      >\n        <td className=\"is-vcentered\">{id}</td>\n        <td className=\"is-vcentered\">\n          {completed && (\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          )}\n        </td>\n        <td className=\"is-vcentered is-expanded\">\n          <p className={cn({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n          >\n            {title}\n          </p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={() => onTodoSelect(todo)}\n          >\n            <span className=\"icon\">\n              <i className={cn({\n                'far fa-eye': !todoStatus,\n                'far fa-eye-slash': todoStatus,\n              })}\n              />\n            </span>\n          </button>\n        </td>\n      </tr>\n    );\n  },\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/index';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onTodoSelect: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectedTodo,\n  onTodoSelect,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          todos.map(todo => {\n            const { id } = todo;\n\n            const isSelectedTodo = todo.id === selectedTodo?.id;\n\n            return (\n              <TodoItem\n                key={id}\n                todo={todo}\n                onTodoSelect={onTodoSelect}\n                todoStatus={isSelectedTodo}\n              />\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\nimport { Option } from '../../types/Option';\n\ntype Props = {\n  onInputChange: (inputValue: string) => void;\n  inputValue: string;\n  option: string;\n  onFilterChange: (option: Option) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    onInputChange,\n    inputValue,\n    option,\n    onFilterChange,\n  }) => (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={option}\n            onChange={(event) => onFilterChange(event.target.value as Option)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={event => onInputChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {inputValue && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  ),\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onClose,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then((data) => {\n        setUser(data);\n      })\n      .catch(error => `Get user data: ${error}`)\n      .finally(() => setIsUserLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={user?.email}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useState, useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Option } from './types/Option';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [option, setOption] = useState(Option.All);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const input = todo.title.toLowerCase().includes(inputValue.toLowerCase().trim());\n\n      switch (option) {\n        case Option.Active:\n          return input && !todo.completed;\n        case Option.Complited:\n          return input && todo.completed;\n        default:\n          return input;\n      }\n    });\n  }, [todos, option, inputValue]);\n\n  const handleOption = useCallback((selectedFilter: Option) => {\n    setOption(selectedFilter);\n  }, []);\n\n  const handleInputChange = useCallback((query: string) => {\n    setInputValue(query);\n  }, []);\n\n  const handleTodoSelect = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(error => `${error} error in TODO's data`)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onInputChange={handleInputChange}\n                inputValue={inputValue}\n                option={option}\n                onFilterChange={handleOption}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              <TodoList\n                todos={visibleTodos}\n                selectedTodo={selectedTodo}\n                onTodoSelect={handleTodoSelect}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal selectedTodo={selectedTodo} onClose={handleModalClose} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}